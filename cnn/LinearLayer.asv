classdef LinearLayer
    properties
        in_features    % input features
        out_features   % output features
        W              % parameters       s2 x s1
        b              % biases           s2 x 1
    end
    
    methods
        function f = LinearLayer(in_features, out_features)
            f.in_features = in_features;
            f.out_features = out_features;
            f.W = ParameterInitialization.kaiming(in_features, out_features);
            f.b = BiasInitialization.random(out_features);
        end
            
        % e.g.
        % s1 = 3, s2 = 2
        %                W                     x
        % | w_{0, 0}, w_{1, 0}, w_{2, 0} |  | z_0 |
        % | w_{0, 1}, w_{1, 1}, w_{2, 1} |  | z_1 | 
        %                                   | z_2 | 
        function z = forward(f, x)  % x is column vector s1 x 1
            z = f.W * x + f.b;      % z is column vector s2 x 1
        end
        
        % change the parameters in backward
        %          learn_rate, grad of W, grad of b
        function [grad_W, grad_b] = backward(f, grad_out)  
            % grad_out: 当前层输出的梯度  
            grad_W = grad_out * f.input_features';  % 权重梯度  
            grad_b = grad_out;  % 偏置梯度  
        
            % 通过权重转置传播到上一层  
            grad_input = f.W' * grad_out;  
        end
    end
end


